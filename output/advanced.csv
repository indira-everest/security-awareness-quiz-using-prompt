"Question Theme","Prompt Used","Question ID","Policy Section / Reference","Generated Question Text","Correct Answer","Explanation for Correct Answer","Policy Alignment (Y/N)","Correctness of Answers (Y/N)","Clarity (1–5)","Engagement / Fun (1–5)","Accessibility / Readability (1–5)","Notes / Suggested Fixes"
"Spot the Mistake","Generate a 'Spot the Mistake' question with a Python code snippet that has a SQL Injection vulnerability.","DEVSEC-01","OWASP A03:2021 - Injection","A developer writes the following Python code to retrieve user data. Which line introduces a critical SQL Injection vulnerability?
1: import sqlite3
2: def get_user(username):
3:     db = sqlite3.connect('app.db')
4:     query = f""SELECT * FROM users WHERE username = '{username}'""
5:     user_data = db.execute(query).fetchone()
6:     return user_data","Line 4: query = f""SELECT * FROM users WHERE username = '{username}'""","Line 4 uses an f-string to directly embed the 'username' variable into the SQL query. This allows an attacker to manipulate the query by providing malicious input (e.g., ' OR 1=1 --), which is a classic SQL Injection vulnerability. The correct approach is to use parameterized queries.","N","Y","5","4","5",""
"Scenario-Based","Generate a scenario-based question about a developer accidentally committing a hardcoded API key to a public code repository.","DEVSEC-02","Secure Coding Best Practices - Secrets Management","A developer working on a new feature accidentally commits code containing a hardcoded AWS_SECRET_ACCESS_KEY to a public GitHub repository. What is the most immediate and critical security risk this action creates? A) The application might fail performance benchmarks. B) The code could be flagged for poor coding style. C) Unauthorized individuals could gain access to and control the company's AWS resources. D) The git history will become unnecessarily large.","C) Unauthorized individuals could gain access to and control the company's AWS resources.","Hardcoding secrets like API keys and checking them into version control, especially a public repository, exposes them to the world. Automated bots constantly scan for such keys, which can be used to compromise cloud infrastructure, steal data, and incur fraudulent charges.","N","Y","5","4","5",""
"Scenario-Based","Generate a scenario-based question testing knowledge of Broken Access Control, specifically Insecure Direct Object Reference (IDOR).","DEVSEC-03","OWASP A01:2021 - Broken Access Control","An engineer is testing a web application's API. They notice that by changing the user ID in the URL from `https://api.example.com/orders/user/501` to `https://api.example.com/orders/user/502`, they can view the order history of a different user. This is a classic example of which OWASP Top 10 vulnerability? A) Security Misconfiguration B) Cryptographic Failures C) Broken Access Control D) Server-Side Request Forgery (SSRF)","C) Broken Access Control","This vulnerability, often called Insecure Direct Object Reference (IDOR), is a type of Broken Access Control. The application fails to perform an authorization check to confirm that the logged-in user has the necessary permissions to access the data requested for user ID 502.","N","Y","5","4","5",""
"Scenario-Based","Create a scenario-based multiple-choice question that forces a developer to choose the correct cryptographic primitive for storing user passwords, distinguishing hashing from encryption.","DEVSEC-04","Cryptographic Best Practices - Password Storage","You are designing a new user authentication system and need to store passwords securely in the database. Which of the following is the most appropriate cryptographic method for this purpose, as it creates a non-reversible, fixed-length representation of the password? A) Encrypting with AES-256 B) Hashing with bcrypt or Argon2 C) Encoding with Base64 D) Signing with RSA","B) Hashing with bcrypt or Argon2","Hashing is a one-way function, meaning you cannot reverse the hash to get the original password. This is ideal for password storage. Modern, slow hashing algorithms like bcrypt or Argon2 are designed to resist brute-force and rainbow table attacks. Encryption (A, D) is reversible, and encoding (C) offers no security.","N","Y","5","3","5",""
"Multiple Choice","Generate a multiple-choice question about the purpose of a specific Content Security Policy (CSP) directive in preventing Cross-Site Scripting (XSS) attacks.","DEVSEC-05","OWASP A03:2021 - Injection (XSS)","Which Content Security Policy (CSP) header is most effective at mitigating stored and reflected Cross-Site Scripting (XSS) attacks by controlling the sources from which scripts are allowed to execute? A) `X-Frame-Options: DENY` B) `Strict-Transport-Security: max-age=31536000` C) `script-src 'self' https://apis.google.com` D) `X-Content-Type-Options: nosniff`","C) `script-src 'self' https://apis.google.com`","The `script-src` directive explicitly defines allowed sources for JavaScript. By not including `'unsafe-inline'` or `'unsafe-eval'`, it prevents the execution of inline scripts and `eval()`-like methods, which are common vectors for XSS attacks. The other headers mitigate different risks (clickjacking, protocol downgrading, MIME-sniffing).","N","Y","4","3","4",""