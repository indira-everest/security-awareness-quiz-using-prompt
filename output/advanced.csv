"Question Theme","Prompt Used","Question ID","Policy Section / Reference","Generated Question Text","Correct Answer","Explanation for Correct Answer","Policy Alignment (Y/N)","Correctness of Answers (Y/N)","Clarity (1–5)","Engagement / Fun (1–5)","Accessibility / Readability (1–5)","Notes / Suggested Fixes"
"Secrets Management","Generate a long, narrative-based question about secrets management featuring the character Jasmine.","ADV-SEC-001","General Security Best Practice","A new developer at Everest is working on a microservice that needs to connect to a production database. To meet a tight deadline set by Ashok, the Project Manager, the developer hardcodes the database credentials directly into a configuration file (`config.yml`) and commits it to the company's private GitHub repository. During a routine code review, Jasmine, the Security Lead, flags this commit as a critical vulnerability. She explains that even in a private repository, this practice is extremely dangerous and violates Everest's secure coding principles. Why is this practice considered a critical security risk, even if the repository is private?
A) It makes the code harder to read and maintain for other developers.
B) The credentials could be inadvertently exposed through a repository leak, unauthorized access, or by being cloned to an insecure developer machine, leading to a direct database compromise.
C) It violates the DRY (Don't Repeat Yourself) principle of software development.
D) It's only a risk if the repository is public; in a private repository, it's an acceptable shortcut for speed.","B","Hardcoding secrets is a major violation of secure coding principles. Secrets can be exposed through repository breaches, accidental publicization, or compromised developer environments. Best practice requires using a dedicated secrets management tool (like HashiCorp Vault or AWS Secrets Manager) to dynamically inject credentials at runtime, completely decoupling secrets from the codebase.","N","Y","5","4","5","Good scenario involving a character and a common developer mistake."
"OWASP - SQL Injection","Create a 'Spot the Mistake' question with a Python code snippet demonstrating a classic SQL Injection vulnerability.","ADV-SEC-002","General Security Best Practice","A developer at Everest is writing a Python function to fetch user details from a database based on a username provided via an API endpoint. Review the following code snippet and identify the primary security vulnerability:
```python
def get_user_details(username):
    conn = get_db_connection()
    cursor = conn.cursor()
    query = ""SELECT user_id, email, role FROM users WHERE username = '"" + username + ""';""
    cursor.execute(query)
    user_data = cursor.fetchone()
    return user_data
```
A) The database connection `get_db_connection()` is not properly closed, leading to a resource leak.
B) The code does not handle the case where `cursor.fetchone()` returns `None`, which could cause a downstream error.
C) The SQL query is constructed by directly concatenating an untrusted user input (`username`), making it vulnerable to SQL Injection.
D) The query selects the user's `role`, which might expose sensitive permission information unnecessarily.","C","The code is vulnerable to SQL Injection because it directly concatenates the `username` variable into the SQL query string. A malicious user could provide input like `' OR '1'='1` to bypass authentication or extract data. The correct approach is to use parameterized queries (prepared statements), where the database driver handles the safe substitution of parameters.","N","Y","5","5","4","Classic and critical vulnerability for technical staff to recognize."
"Cryptography / Data in Transit","Develop a scenario-based question about the importance of encrypting internal network traffic.","ADV-SEC-003","General Security Best Practice","The development team at Everest is building a new internal API that will transmit employee performance data between two microservices within the same Virtual Private Cloud (VPC). A junior developer suggests that since the traffic is internal and never leaves the Everest cloud environment, using standard HTTP for communication is acceptable and will be slightly faster than HTTPS. What is the most significant security risk of this approach?
A) HTTP requests are more likely to be dropped by network firewalls.
B) Using HTTP instead of HTTPS will cause compatibility issues with modern web browsers, even for APIs.
C) The performance gain from using HTTP is negligible and not worth the effort to configure.
D) An attacker who gains a foothold within the VPC (e.g., by compromising another service) could perform a man-in-the-middle (MITM) attack to intercept, read, or modify the sensitive employee data in transit.","D","The principle of ""defense in depth"" dictates that security controls should be layered. Relying solely on network boundaries (like a VPC) is insufficient. All sensitive data, even internal traffic, should be encrypted in transit (e.g., using TLS/HTTPS) to protect against internal threats and lateral movement by an attacker who has already breached the perimeter.","N","Y","5","4","5","Addresses the common misconception that internal traffic doesn't need encryption."