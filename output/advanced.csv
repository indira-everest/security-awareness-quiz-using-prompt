"Question Theme","Prompt Used","Question ID","Policy Section / Reference","Generated Question Text","Correct Answer","Explanation for Correct Answer","Policy Alignment (Y/N)","Correctness of Answers (Y/N)","Clarity (1–5)","Engagement / Fun (1–5)","Accessibility / Readability (1–5)","Notes / Suggested Fixes"
"Spot the Mistake","Generate a 'Spot the Mistake' question with a Python code snippet vulnerable to SQL Injection due to insecure string formatting.","STM-DEV-01","OWASP Top 10: A03-Injection","A developer wrote the following Python code to fetch user data from a database. What is the primary security vulnerability in this snippet? `cursor.execute(f""SELECT * FROM users WHERE username = '{username}'"")` Options: A) Inefficient query B) Hardcoded credentials C) SQL Injection D) Cross-Site Scripting (XSS)","C) SQL Injection","The code uses an f-string to directly embed the `username` variable into the SQL query. This allows an attacker to manipulate the query by providing malicious input (e.g., `' OR '1'='1'`), bypassing authentication. The correct approach is to use parameterized queries.","N","Y","5","4","5","This question directly tests a developer's ability to spot a common and critical vulnerability in code."
"Scenario-Based","Create a scenario-based question about Broken Access Control (specifically Insecure Direct Object Reference) where a user can access another user's data by changing a URL parameter.","SC-DEV-02","OWASP Top 10: A01-Broken Access Control","An application allows users to view their invoices at the URL `https://example.com/invoices?id=123`. A user discovers they can view another customer's invoice by changing the URL to `https://example.com/invoices?id=124`. This vulnerability is an example of what? Options: A) Cross-Site Request Forgery (CSRF) B) Broken Access Control C) Server-Side Request Forgery (SSRF) D) Security Misconfiguration","B) Broken Access Control","This is a classic example of Broken Access Control, specifically an Insecure Direct Object Reference (IDOR). The application fails to verify on the server-side that the logged-in user is authorized to access the requested resource (invoice ID 124).","N","Y","5","4","5","Clear, real-world scenario that illustrates a fundamental access control flaw."
"Multiple Choice","Generate a multiple-choice question on the best practice for storing database credentials in a cloud-native application, contrasting secure and insecure methods.","MC-DEV-03","Secure Coding Best Practices","When deploying a new microservice to a cloud environment, what is the most secure method for managing its database credentials? Options: A) Storing them in a `.env` file committed to the Git repository. B) Hardcoding them as variables directly in the application source code. C) Using a dedicated secrets management service (e.g., AWS Secrets Manager, HashiCorp Vault). D) Passing them as plain-text environment variables in the CI/CD pipeline logs.","C) Using a dedicated secrets management service (e.g., AWS Secrets Manager, HashiCorp Vault).","Dedicated secrets management services provide secure storage, fine-grained access control, auditing, and automated rotation capabilities. Storing secrets in source code, config files in Git, or plain-text in logs exposes them to significant risk of compromise.","N","Y","5","3","5","Tests knowledge of modern, critical infrastructure security practices."
"True/False","Create a True/False question that tests the fundamental understanding of hashing's one-way nature versus reversible operations like encryption.","TF-DEV-04","Cryptography Fundamentals","True or False: Hashing algorithms like SHA-256 are designed to be reversible, allowing you to easily retrieve the original input data from the hash output.","False","Hashing is a one-way function. It is designed to be computationally infeasible to reverse the process and derive the original input from the hash output. This property makes it ideal for storing password digests and verifying data integrity, but not for encrypting data that needs to be decrypted later.","N","Y","5","3","5","A simple but crucial concept check on a foundational cryptographic principle."
"Mini-Story","Write a mini-story question about a developer building a file upload feature and overlooking a critical server-side validation step, leading to a remote code execution vulnerability.","MS-DEV-05","OWASP: Unrestricted File Upload","A developer, Alex, is building a profile picture upload feature. The feature correctly checks that the uploaded file is not too large. However, it only validates the `Content-Type` header to ensure it's an image (e.g., `image/jpeg`). An attacker bypasses this by uploading a malicious PHP script with the `Content-Type` header set to `image/jpeg`. What critical validation step did Alex miss? Options: A) Validating the file size. B) Validating the file's content and extension on the server-side, not just the client-provided header. C) Implementing rate limiting on uploads. D) Checking for Cross-Site Scripting (XSS) in the filename.","B) Validating the file's content and extension on the server-side, not just the client-provided header.","The `Content-Type` header is client-controlled and cannot be trusted. The server must perform its own validation, such as checking file magic numbers and enforcing a strict allow-list of file extensions, to confirm the file is actually a safe image and not a malicious script.","N","Y","5","4","5","Relatable developer story that highlights the danger of trusting client-side data."